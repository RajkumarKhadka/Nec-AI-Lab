{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPd4+wZWu456xtMbIZcOMEe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RajkumarKhadka/Nec-AI-Lab/blob/main/AndOr.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4mY-BclcMY6L",
        "outputId": "ee262b75-dc9e-44b0-b367-ee4482d68738"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Randomly initialized weights for each input:\n",
            "weights[0]: 0.9\n",
            "weights[1]: 0.4\n",
            "Randomly initialized weights for each input:\n",
            "weights[0]: 0.1\n",
            "weights[1]: 0.2\n",
            "input: [1 1] actual output: 1 predicted output:  0 updated weights: [0.2, 0.30000000000000004]\n",
            "Final weights: [0.2, 0.30000000000000004]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n",
        "y = np.array([0, 0, 0, 1])\n",
        "def step(x,th):\n",
        "  if x>=th:\n",
        "    return(1)\n",
        "  return(0)\n",
        "\n",
        "def linearInt(x):\n",
        "  return (round(x))\n",
        "\n",
        "def predict(X, y, weights):\n",
        "  print(\"X\\tActual\\tPredicted\")\n",
        "  for x_input, y_output in zip(X, y):\n",
        "    inSum=np.sum(x_input * weights)\n",
        "    y_pred = step(inSum,th)\n",
        "    print(x_input,\"\\t\",y_output,\"\\t\",y_pred)\n",
        "lr = 0.1\n",
        "th = 0.5\n",
        "\n",
        "# Initialize weights array\n",
        "weights = []\n",
        "\n",
        "# Loop through each element in X\n",
        "for i in range(X.shape[1]): #+1 for te bias\n",
        "    # Initialize w randomly between 0 and 1 using Python's random module & Convert w to have only one digit after the decimal point\n",
        "    w = round(np.random.rand(),1)\n",
        "    weights.append(w)\n",
        "\n",
        "print(\"Randomly initialized weights for each input:\")\n",
        "for i in range(len(weights)):\n",
        "    print(f\"weights[{i}]:\", weights[i])\n",
        "# initialize constants\n",
        "lr = 0.1\n",
        "th = 0.5\n",
        "\n",
        "# Initialize weights array\n",
        "weights = []\n",
        "\n",
        "# Loop through each element in X\n",
        "for i in range(X.shape[1]): #+1 for te bias\n",
        "    # Initialize w randomly between 0 and 1 using Python's random module & Convert w to have only one digit after the decimal point\n",
        "    w = round(np.random.rand(),1)\n",
        "    weights.append(w)\n",
        "\n",
        "print(\"Randomly initialized weights for each input:\")\n",
        "for i in range(len(weights)):\n",
        "    print(f\"weights[{i}]:\", weights[i])\n",
        " #For AND/OR Logic Gates\n",
        "# print (step(0.5,th))\n",
        "iterateFlag = True\n",
        "while (iterateFlag):\n",
        "  iterateFlag = False\n",
        "  for x_input, y_output in zip(X, y):\n",
        "    inSum=np.sum(x_input * weights)\n",
        "    y_pred = step(inSum,th)\n",
        "    err = y_output - y_pred\n",
        "    if(err!=0):\n",
        "      iterateFlag = True\n",
        "      for i in range(len(weights)):\n",
        "        dw = lr * x_input[i] * err\n",
        "        weights[i] = weights[i] + dw\n",
        "      print(\"input:\",x_input, \"actual output:\",y_output,\"predicted output: \",y_pred,\"updated weights:\", weights)\n",
        "\n",
        "print(\"Final weights:\", weights)"
      ]
    }
  ]
}
